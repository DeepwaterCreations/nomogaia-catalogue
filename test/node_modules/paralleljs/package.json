{
  "name": "paralleljs",
  "version": "0.2.1",
  "author": {
    "name": "Adam Savitzky",
    "email": "adam.savitzky@gmail.com"
  },
  "contributors": [
    {
      "name": "Sebastian Mayr",
      "email": "sebmaster16@gmail.com",
      "url": "http://s3bmaster.blogspot.co.at/"
    }
  ],
  "description": "parallel.js enables easy multi-thread processing in javascript",
  "main": "lib/parallel.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/adambom/parallel.js.git"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "keywords": [
    "parallel",
    "spawn",
    "map",
    "thread",
    "parallel.js",
    "workers",
    "webworkers"
  ],
  "devDependencies": {
    "jasmine-node": "x",
    "q": "x"
  },
  "license": "BSD",
  "scripts": {
    "test": "jasmine-node --verbose test/specs"
  },
  "engines": {
    "node": ">=0.9.10"
  },
  "testling": {
    "scripts": [
      "test/lib/jasmine/jasmine.js",
      "test/specs/*.js",
      "test/runner.js"
    ]
  },
  "readme": "Parallel.js\n===========\n\n### Parallel Computing with Javascript\n*******\n\n\nParallel.js is a simple library for parallel computing in Javascript, either in Node.js or in the Web Browser.\nParallel takes advantage of Web Workers for the web, and child processes for Node.\n\n# Installation\nYou can download the raw javascript file [here](https://raw.github.com/adambom/parallel.js/master/lib/parallel.js)\n\nJust include it via a script tag in your HTML page\n\nParallel.js is also available as a node module:\n\n```bash\nnpm install paralleljs\n```\n\n# Usage\n\n#### `Parallel(data, opts)`\nThis is the constructor. Use it to new up any parallel jobs. The constructor takes an array of data you want to\noperate on. This data will be held in memory until you finish your job, and can be accessed via the `.data` attribute\nof your job.\n\nThe object returned by the `Parallel` constructor is meant to be chained, so you can produce a chain of \noperations on the provided data.\n\n*Arguments*\n* `data`: This is the data you wish to operate on. Will often be an array, but the only restrictions are that your values are serializable as JSON.\n* `options` (optional): Some options for your job\n  * `evalPath` (optional): This is the path to the file eval.js. This is required when running in node, and required for some browsers (IE 10) in order to work around cross-domain restrictions for web workers. Defaults to the same location as parallel.js in node environments, and `null` in the browser.\n  * `maxWorkers` (optional): The maximum number of permitted worker threads. This will default to 4, or the number of cpus on your computer if you're running node\n  * `synchronous` (optional): If webworkers are not available, whether or not to fall back to synchronous processing using `setTimeout`. Defaults to `true`.\n\n*Example*\n```javascript\nvar p = new Parallel([1, 2, 3, 4, 5]);\n\nconsole.log(p.data); // prints [1, 2, 3, 4, 5]\n```\n\n*******\n\n#### `spawn(fn)`\nThis function will spawn a new process on a worker thread. Pass it the function you want to call. Your\nfunction will receive one argument, which is the current data. The value returned from your spawned function will\nupdate the current data.\n\n*Arguments*\n* `fn`: A function to execute on a worker thread. Receives the wrapped data as an argument. The value returned will be assigned to the wrapped data.\n\n*Example*\n```javascript\nvar p = new Parallel('forwards');\n\n// Spawn a remote job (we'll see more on how to use then later)\np.spawn(function (data) {\n  data = data.reverse();\n  \n  console.log(data); // logs sdrawrof\n  \n  return data;\n}).then(function (data) {\n  console.log(data) // logs sdrawrof\n});\n```\n\n*******\n\n#### `map(fn)`\nMap will apply the supplied function to every element in the wrapped data. Parallel will spawn one worker for\neach array element in the data, or the supplied maxWorkers argument. The values returned will be stored for \nfurther processing.\n\n*Arguments*\n* `fn`: A function to apply. Receives the wrapped data as an argument. The value returned will be assigned to the wrapped data.\n\n*Example*\n```javascript\nvar p = new Parallel([0, 1, 2, 3, 4, 5, 6]),\n    log = function () { console.log(arguments); };\n\n// One gotcha: anonymous functions cannot be serialzed\n// If you want to do recursion, make sure the function\n// is named appropriately\nfunction fib(n) {\n  return n < 2 ? 1 : fib(n - 1) + fib(n - 2);\n};\n    \np.map(fib).then(log)\n\n// Logs the first 7 Fibonnaci numbers, woot!\n```\n\n*******\n\n#### `reduce(fn)`\nReduce applies an operation to every member of the wrapped data, and returns a scalar value produced by the operation.\nUse it for combining the results of a map operation, by summing numbers for example. This takes a reducing function,\nwhich gets an argument, `data`, an array of the stored value, and the current element.\n\n*Arguments*\n* `fn`: A function to apply. Receives the stored value and current element as argument. The value returned will be stored as the current value for the next iteration. Finally, the current value will be assigned to current data.\n\n*Example*\n```javascript\nvar p = new Parallel([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n\nfunction add(d) { return d[0] + d[1]; }\nfunction factorial(n) { return n < 2 ? 1 : n * factorial(n - 1); }\nfunction log() { console.log(arguments); }\n\np.require(factorial)\n\n// Approximate e^10\np.map(function (n) { return Math.pow(10, n); }).reduce(add).then(log);\n```\n\n*******\n\n#### `then(success, fail)`\nThe functions given to `then` are called after the last requested operation has finished.\n`success` receives the resulting data object, while `fail` will receive an error object.\n\n*Arguments*\n- `success`: A function that gets called upon succesful completion. Receives the wrapped data as an argument.\n- `failure` (optional): A function that gets called if the job fails. The function is passed an error object.\n\n*Example*\n```javascript\nvar p = new Parallel([1, 2, 3]);\n\nfunction dbl(n) { return n * 2; }\n\np.map(dbl).map(dbl).map(dbl).then(function (data) {\n  console.log(data); // logs [8, 16, 24]\n});\n\n// Approximate e^10\np.map(function (n) { return Math.pow(10, n) / factorial(n); }).reduce(add).then(log);\n```\n\n*******\n\n#### `require(state)`\nIf you have state that you want to share between your main thread and the worker threads, this is how. Require\ntakes either a string or a function. A string should point to a file name. Note that in order to\nuse ```require``` with a file name as an argument, you have to provide the evalPath property in the options\nobject.\n\n*Example*\n```javascript\nvar p = new Parallel([1, 2, 3], { evalPath: 'https://raw.github.com/adambom/parallel.js/master/lib/eval.js' });\n\nfunction cubeRoot(n) { return Math.pow(n, 1 / 3); }\n\n// Require a function\np.require(cubeRoot);\n\n// Require a file\np.require('blargh.js');\n\np.map(function (d) {\n  return blargh(20 * cubeRoot(d));\n});\n```\n\n# Compatibility\n[![browser support](https://ci.testling.com/adambom/parallel.js.png)](https://ci.testling.com/adambom/parallel.js)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/adambom/parallel.js/issues"
  },
  "_id": "paralleljs@0.2.1",
  "dist": {
    "shasum": "79fec9df48928f05d7b7d6b830629b27d80bbcd8"
  },
  "_from": "paralleljs@",
  "_resolved": "https://registry.npmjs.org/paralleljs/-/paralleljs-0.2.1.tgz"
}
